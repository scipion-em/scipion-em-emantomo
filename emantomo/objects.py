# *
# * Authors:     Scipion Team
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion-users@lists.sourceforge.net'
# *
# **************************************************************************
from os.path import join
import h5py
from emantomo.constants import TOMOBOX, PARTICLES_3D_DIR
from pwem import EMObject
from pwem.objects import Volume, SetOfVolumes
from pyworkflow.object import String, Float


class EmanMetaData:

    def __init__(self, tsId=None, inTomo=None, tomoHdfName=None, ts=None, tsHdfName=None, ctf=None, coords=None,
                 particles=None, jsonFile=None, processingInd=None):

        self.tsId = tsId
        self.inTomo = inTomo
        self.tomoHdfName = tomoHdfName
        self.ts = ts
        self.tsHdfName = tsHdfName
        self.ctf = ctf
        self.coords = coords
        self.particles = particles
        self.jsonFile = jsonFile
        self.processingInd = processingInd


class EmanProject(EMObject):

    def __init__(self, scipionPrjPath=None, emanProjName=None, samplingRate=None, **kwargs):
        super().__init__(**kwargs)
        self._emanProjPath = String(emanProjName)
        self._scipionProjPath = String(scipionPrjPath)
        self._samplingRate = Float(samplingRate)

    def setEmanProjPath(self, value):
        self._emanProjPath.set(value)

    def setScipionProjPath(self, value):
        self._scipionProjPath.set(value)

    def setSamplingRate(self, value):
        self._samplingRate.set(value)

    def getEmanProjPath(self):
        return self._emanProjPath.get()

    def getScipionProjPath(self):
        return self._scipionProjPath.get()

    def getSamplingRate(self):
        return self._samplingRate.get()

    def getFullEmanPrjPath(self, *paths):
        """Generate the full path of the EMAN project, located inside the Scipion project directory"""
        return join(self.getScipionProjPath(), self.getEmanProjPath(), *paths)

    def getEmanPrjSubDir(self, *paths):
        """Get the path of the requested subdirectory from the EMAN project directory,"""
        return join(self.getEmanProjPath(), *paths)

    def getParticlesStackInfo(self, tsId, prefix='extra', label=TOMOBOX, getLen=True):
        """It generates the file name of the corresponding stack file generated by EMAN, and also the number
        of particles contained on it if requested"""
        stackLen = None
        stackFile = self.getEmanPrjSubDir(PARTICLES_3D_DIR, '%s-%s__%s.hdf' % (prefix, tsId, label))
        if getLen:
            stackLen = self._getPartStackLen(stackFile)
        return stackFile, stackLen

    @staticmethod
    def _getPartStackLen(stackFile):
        """Read the length of a HDF stack file"""
        with h5py.File(stackFile, "r") as f:
            return len(f['MDF']['images'])


class EmanPSubtomogram(Volume):

    def __init__(self, fileName=None, samplingRate=None, tsId=None, classId=None, index=None, **kwargs):
        super().__init__(**kwargs)
        self.tsId = String(tsId)
        if fileName:
            self.setFileName(fileName)
        if samplingRate:
            self.setSamplingRate(samplingRate)
        if classId:
            self.setClassId(classId)
        if index:
            self.setIndex(index)

    def getTomoId(self):
        return self.tsId.get()


class SetOfEmanPseudoSubtomograms(SetOfVolumes):
    ITEM_TYPE = EmanPSubtomogram

